# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision_msgs/VisionFlattenedObject.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class VisionFlattenedObject(genpy.Message):
  _md5sum = "329e772278d522fb7e6724e9d45514a7"
  _type = "vision_msgs/VisionFlattenedObject"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
string id                                  # name of identifying the object (milk, orange juice, etc)
string category                            # object type (drink, snack, etc)
#sensor_msgs/Image image	           # image in rgb of object;
#sensor_msgs/PointCloud2 point_cloud       # Point cloud (probably, colored)
geometry_msgs/Vector3 size                 # Size in meters: size in x, y and z
geometry_msgs/Vector3[] eigen_vectors      # eigen vectors of the object from 3D informaction
geometry_msgs/Vector3 eigen_values	   # eigen values asociated with eigen_vector
int32 xi		          	   # top left x bounding box in image
int32 yi				   # top left y bounding box in image
int32 widthi                               # top widht bounding box in image
int32 heighti                              # top height bounding box in image
geometry_msgs/Point  nearest_point         # The nearespoint of the object
geometry_msgs/Point  center_point          # The nearespoint of the object

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','id','category','size','eigen_vectors','eigen_values','xi','yi','widthi','heighti','nearest_point','center_point']
  _slot_types = ['std_msgs/Header','string','string','geometry_msgs/Vector3','geometry_msgs/Vector3[]','geometry_msgs/Vector3','int32','int32','int32','int32','geometry_msgs/Point','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,category,size,eigen_vectors,eigen_values,xi,yi,widthi,heighti,nearest_point,center_point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VisionFlattenedObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = ''
      if self.category is None:
        self.category = ''
      if self.size is None:
        self.size = geometry_msgs.msg.Vector3()
      if self.eigen_vectors is None:
        self.eigen_vectors = []
      if self.eigen_values is None:
        self.eigen_values = geometry_msgs.msg.Vector3()
      if self.xi is None:
        self.xi = 0
      if self.yi is None:
        self.yi = 0
      if self.widthi is None:
        self.widthi = 0
      if self.heighti is None:
        self.heighti = 0
      if self.nearest_point is None:
        self.nearest_point = geometry_msgs.msg.Point()
      if self.center_point is None:
        self.center_point = geometry_msgs.msg.Point()
    else:
      self.header = std_msgs.msg.Header()
      self.id = ''
      self.category = ''
      self.size = geometry_msgs.msg.Vector3()
      self.eigen_vectors = []
      self.eigen_values = geometry_msgs.msg.Vector3()
      self.xi = 0
      self.yi = 0
      self.widthi = 0
      self.heighti = 0
      self.nearest_point = geometry_msgs.msg.Point()
      self.center_point = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.category
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.size.x, _x.size.y, _x.size.z))
      length = len(self.eigen_vectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.eigen_vectors:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3d4i6d().pack(_x.eigen_values.x, _x.eigen_values.y, _x.eigen_values.z, _x.xi, _x.yi, _x.widthi, _x.heighti, _x.nearest_point.x, _x.nearest_point.y, _x.nearest_point.z, _x.center_point.x, _x.center_point.y, _x.center_point.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.size is None:
        self.size = geometry_msgs.msg.Vector3()
      if self.eigen_vectors is None:
        self.eigen_vectors = None
      if self.eigen_values is None:
        self.eigen_values = geometry_msgs.msg.Vector3()
      if self.nearest_point is None:
        self.nearest_point = geometry_msgs.msg.Point()
      if self.center_point is None:
        self.center_point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.category = str[start:end].decode('utf-8')
      else:
        self.category = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.size.x, _x.size.y, _x.size.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eigen_vectors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.eigen_vectors.append(val1)
      _x = self
      start = end
      end += 88
      (_x.eigen_values.x, _x.eigen_values.y, _x.eigen_values.z, _x.xi, _x.yi, _x.widthi, _x.heighti, _x.nearest_point.x, _x.nearest_point.y, _x.nearest_point.z, _x.center_point.x, _x.center_point.y, _x.center_point.z,) = _get_struct_3d4i6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.category
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.size.x, _x.size.y, _x.size.z))
      length = len(self.eigen_vectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.eigen_vectors:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3d4i6d().pack(_x.eigen_values.x, _x.eigen_values.y, _x.eigen_values.z, _x.xi, _x.yi, _x.widthi, _x.heighti, _x.nearest_point.x, _x.nearest_point.y, _x.nearest_point.z, _x.center_point.x, _x.center_point.y, _x.center_point.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.size is None:
        self.size = geometry_msgs.msg.Vector3()
      if self.eigen_vectors is None:
        self.eigen_vectors = None
      if self.eigen_values is None:
        self.eigen_values = geometry_msgs.msg.Vector3()
      if self.nearest_point is None:
        self.nearest_point = geometry_msgs.msg.Point()
      if self.center_point is None:
        self.center_point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.category = str[start:end].decode('utf-8')
      else:
        self.category = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.size.x, _x.size.y, _x.size.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eigen_vectors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.eigen_vectors.append(val1)
      _x = self
      start = end
      end += 88
      (_x.eigen_values.x, _x.eigen_values.y, _x.eigen_values.z, _x.xi, _x.yi, _x.widthi, _x.heighti, _x.nearest_point.x, _x.nearest_point.y, _x.nearest_point.z, _x.center_point.x, _x.center_point.y, _x.center_point.z,) = _get_struct_3d4i6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3d4i6d = None
def _get_struct_3d4i6d():
    global _struct_3d4i6d
    if _struct_3d4i6d is None:
        _struct_3d4i6d = struct.Struct("<3d4i6d")
    return _struct_3d4i6d
