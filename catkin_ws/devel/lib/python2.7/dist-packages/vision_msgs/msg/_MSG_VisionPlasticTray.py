# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision_msgs/MSG_VisionPlasticTray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class MSG_VisionPlasticTray(genpy.Message):
  _md5sum = "7fd9643cb9f19bb45cb9febf36963dd3"
  _type = "vision_msgs/MSG_VisionPlasticTray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

sensor_msgs/Image   imgOutput
#std_msgs/Bool wasFound
#cluttery section
geometry_msgs/Vector3 size_zone_cluttery                 # Size in meters: size in x, y and z
geometry_msgs/Vector3[] eigen_vectors_zone_cluttery      # eigen vectors of the object from 3D informaction
geometry_msgs/Vector3 eigen_values_zone_cluttery	     # eigen values asociated with eigen_vector
geometry_msgs/Point  nearest_point_zone_cluttery         # The nearespoint of the object
geometry_msgs/Point  center_point_zone_cluttery          # The nearespoint of the object


geometry_msgs/Vector3 size_zone_dish                 # Size in meters: size in x, y and z
geometry_msgs/Vector3[] eigen_vectors_zone_dish      # eigen vectors of the object from 3D informaction
geometry_msgs/Vector3 eigen_values_zone_dish	     # eigen values asociated with eigen_vector
geometry_msgs/Point  nearest_point_zone_dish         # The nearespoint of the object
geometry_msgs/Point  center_point_zone_dish          # The nearespoint of the object


geometry_msgs/Vector3 size_zone_glass                 # Size in meters: size in x, y and z
geometry_msgs/Vector3[] eigen_vectors_zone_glass      # eigen vectors of the object from 3D informaction
geometry_msgs/Vector3 eigen_values_zone_glass	     # eigen values asociated with eigen_vector
geometry_msgs/Point  nearest_point_zone_glass         # The nearespoint of the object
geometry_msgs/Point  center_point_zone_glass          # The nearespoint of the object

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','imgOutput','size_zone_cluttery','eigen_vectors_zone_cluttery','eigen_values_zone_cluttery','nearest_point_zone_cluttery','center_point_zone_cluttery','size_zone_dish','eigen_vectors_zone_dish','eigen_values_zone_dish','nearest_point_zone_dish','center_point_zone_dish','size_zone_glass','eigen_vectors_zone_glass','eigen_values_zone_glass','nearest_point_zone_glass','center_point_zone_glass']
  _slot_types = ['std_msgs/Header','sensor_msgs/Image','geometry_msgs/Vector3','geometry_msgs/Vector3[]','geometry_msgs/Vector3','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Vector3','geometry_msgs/Vector3[]','geometry_msgs/Vector3','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Vector3','geometry_msgs/Vector3[]','geometry_msgs/Vector3','geometry_msgs/Point','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,imgOutput,size_zone_cluttery,eigen_vectors_zone_cluttery,eigen_values_zone_cluttery,nearest_point_zone_cluttery,center_point_zone_cluttery,size_zone_dish,eigen_vectors_zone_dish,eigen_values_zone_dish,nearest_point_zone_dish,center_point_zone_dish,size_zone_glass,eigen_vectors_zone_glass,eigen_values_zone_glass,nearest_point_zone_glass,center_point_zone_glass

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MSG_VisionPlasticTray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imgOutput is None:
        self.imgOutput = sensor_msgs.msg.Image()
      if self.size_zone_cluttery is None:
        self.size_zone_cluttery = geometry_msgs.msg.Vector3()
      if self.eigen_vectors_zone_cluttery is None:
        self.eigen_vectors_zone_cluttery = []
      if self.eigen_values_zone_cluttery is None:
        self.eigen_values_zone_cluttery = geometry_msgs.msg.Vector3()
      if self.nearest_point_zone_cluttery is None:
        self.nearest_point_zone_cluttery = geometry_msgs.msg.Point()
      if self.center_point_zone_cluttery is None:
        self.center_point_zone_cluttery = geometry_msgs.msg.Point()
      if self.size_zone_dish is None:
        self.size_zone_dish = geometry_msgs.msg.Vector3()
      if self.eigen_vectors_zone_dish is None:
        self.eigen_vectors_zone_dish = []
      if self.eigen_values_zone_dish is None:
        self.eigen_values_zone_dish = geometry_msgs.msg.Vector3()
      if self.nearest_point_zone_dish is None:
        self.nearest_point_zone_dish = geometry_msgs.msg.Point()
      if self.center_point_zone_dish is None:
        self.center_point_zone_dish = geometry_msgs.msg.Point()
      if self.size_zone_glass is None:
        self.size_zone_glass = geometry_msgs.msg.Vector3()
      if self.eigen_vectors_zone_glass is None:
        self.eigen_vectors_zone_glass = []
      if self.eigen_values_zone_glass is None:
        self.eigen_values_zone_glass = geometry_msgs.msg.Vector3()
      if self.nearest_point_zone_glass is None:
        self.nearest_point_zone_glass = geometry_msgs.msg.Point()
      if self.center_point_zone_glass is None:
        self.center_point_zone_glass = geometry_msgs.msg.Point()
    else:
      self.header = std_msgs.msg.Header()
      self.imgOutput = sensor_msgs.msg.Image()
      self.size_zone_cluttery = geometry_msgs.msg.Vector3()
      self.eigen_vectors_zone_cluttery = []
      self.eigen_values_zone_cluttery = geometry_msgs.msg.Vector3()
      self.nearest_point_zone_cluttery = geometry_msgs.msg.Point()
      self.center_point_zone_cluttery = geometry_msgs.msg.Point()
      self.size_zone_dish = geometry_msgs.msg.Vector3()
      self.eigen_vectors_zone_dish = []
      self.eigen_values_zone_dish = geometry_msgs.msg.Vector3()
      self.nearest_point_zone_dish = geometry_msgs.msg.Point()
      self.center_point_zone_dish = geometry_msgs.msg.Point()
      self.size_zone_glass = geometry_msgs.msg.Vector3()
      self.eigen_vectors_zone_glass = []
      self.eigen_values_zone_glass = geometry_msgs.msg.Vector3()
      self.nearest_point_zone_glass = geometry_msgs.msg.Point()
      self.center_point_zone_glass = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.imgOutput.header.seq, _x.imgOutput.header.stamp.secs, _x.imgOutput.header.stamp.nsecs))
      _x = self.imgOutput.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.imgOutput.height, _x.imgOutput.width))
      _x = self.imgOutput.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.imgOutput.is_bigendian, _x.imgOutput.step))
      _x = self.imgOutput.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.size_zone_cluttery.x, _x.size_zone_cluttery.y, _x.size_zone_cluttery.z))
      length = len(self.eigen_vectors_zone_cluttery)
      buff.write(_struct_I.pack(length))
      for val1 in self.eigen_vectors_zone_cluttery:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_12d().pack(_x.eigen_values_zone_cluttery.x, _x.eigen_values_zone_cluttery.y, _x.eigen_values_zone_cluttery.z, _x.nearest_point_zone_cluttery.x, _x.nearest_point_zone_cluttery.y, _x.nearest_point_zone_cluttery.z, _x.center_point_zone_cluttery.x, _x.center_point_zone_cluttery.y, _x.center_point_zone_cluttery.z, _x.size_zone_dish.x, _x.size_zone_dish.y, _x.size_zone_dish.z))
      length = len(self.eigen_vectors_zone_dish)
      buff.write(_struct_I.pack(length))
      for val1 in self.eigen_vectors_zone_dish:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_12d().pack(_x.eigen_values_zone_dish.x, _x.eigen_values_zone_dish.y, _x.eigen_values_zone_dish.z, _x.nearest_point_zone_dish.x, _x.nearest_point_zone_dish.y, _x.nearest_point_zone_dish.z, _x.center_point_zone_dish.x, _x.center_point_zone_dish.y, _x.center_point_zone_dish.z, _x.size_zone_glass.x, _x.size_zone_glass.y, _x.size_zone_glass.z))
      length = len(self.eigen_vectors_zone_glass)
      buff.write(_struct_I.pack(length))
      for val1 in self.eigen_vectors_zone_glass:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_9d().pack(_x.eigen_values_zone_glass.x, _x.eigen_values_zone_glass.y, _x.eigen_values_zone_glass.z, _x.nearest_point_zone_glass.x, _x.nearest_point_zone_glass.y, _x.nearest_point_zone_glass.z, _x.center_point_zone_glass.x, _x.center_point_zone_glass.y, _x.center_point_zone_glass.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imgOutput is None:
        self.imgOutput = sensor_msgs.msg.Image()
      if self.size_zone_cluttery is None:
        self.size_zone_cluttery = geometry_msgs.msg.Vector3()
      if self.eigen_vectors_zone_cluttery is None:
        self.eigen_vectors_zone_cluttery = None
      if self.eigen_values_zone_cluttery is None:
        self.eigen_values_zone_cluttery = geometry_msgs.msg.Vector3()
      if self.nearest_point_zone_cluttery is None:
        self.nearest_point_zone_cluttery = geometry_msgs.msg.Point()
      if self.center_point_zone_cluttery is None:
        self.center_point_zone_cluttery = geometry_msgs.msg.Point()
      if self.size_zone_dish is None:
        self.size_zone_dish = geometry_msgs.msg.Vector3()
      if self.eigen_vectors_zone_dish is None:
        self.eigen_vectors_zone_dish = None
      if self.eigen_values_zone_dish is None:
        self.eigen_values_zone_dish = geometry_msgs.msg.Vector3()
      if self.nearest_point_zone_dish is None:
        self.nearest_point_zone_dish = geometry_msgs.msg.Point()
      if self.center_point_zone_dish is None:
        self.center_point_zone_dish = geometry_msgs.msg.Point()
      if self.size_zone_glass is None:
        self.size_zone_glass = geometry_msgs.msg.Vector3()
      if self.eigen_vectors_zone_glass is None:
        self.eigen_vectors_zone_glass = None
      if self.eigen_values_zone_glass is None:
        self.eigen_values_zone_glass = geometry_msgs.msg.Vector3()
      if self.nearest_point_zone_glass is None:
        self.nearest_point_zone_glass = geometry_msgs.msg.Point()
      if self.center_point_zone_glass is None:
        self.center_point_zone_glass = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.imgOutput.header.seq, _x.imgOutput.header.stamp.secs, _x.imgOutput.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imgOutput.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imgOutput.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.imgOutput.height, _x.imgOutput.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imgOutput.encoding = str[start:end].decode('utf-8')
      else:
        self.imgOutput.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.imgOutput.is_bigendian, _x.imgOutput.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.imgOutput.data = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.size_zone_cluttery.x, _x.size_zone_cluttery.y, _x.size_zone_cluttery.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eigen_vectors_zone_cluttery = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.eigen_vectors_zone_cluttery.append(val1)
      _x = self
      start = end
      end += 96
      (_x.eigen_values_zone_cluttery.x, _x.eigen_values_zone_cluttery.y, _x.eigen_values_zone_cluttery.z, _x.nearest_point_zone_cluttery.x, _x.nearest_point_zone_cluttery.y, _x.nearest_point_zone_cluttery.z, _x.center_point_zone_cluttery.x, _x.center_point_zone_cluttery.y, _x.center_point_zone_cluttery.z, _x.size_zone_dish.x, _x.size_zone_dish.y, _x.size_zone_dish.z,) = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eigen_vectors_zone_dish = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.eigen_vectors_zone_dish.append(val1)
      _x = self
      start = end
      end += 96
      (_x.eigen_values_zone_dish.x, _x.eigen_values_zone_dish.y, _x.eigen_values_zone_dish.z, _x.nearest_point_zone_dish.x, _x.nearest_point_zone_dish.y, _x.nearest_point_zone_dish.z, _x.center_point_zone_dish.x, _x.center_point_zone_dish.y, _x.center_point_zone_dish.z, _x.size_zone_glass.x, _x.size_zone_glass.y, _x.size_zone_glass.z,) = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eigen_vectors_zone_glass = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.eigen_vectors_zone_glass.append(val1)
      _x = self
      start = end
      end += 72
      (_x.eigen_values_zone_glass.x, _x.eigen_values_zone_glass.y, _x.eigen_values_zone_glass.z, _x.nearest_point_zone_glass.x, _x.nearest_point_zone_glass.y, _x.nearest_point_zone_glass.z, _x.center_point_zone_glass.x, _x.center_point_zone_glass.y, _x.center_point_zone_glass.z,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.imgOutput.header.seq, _x.imgOutput.header.stamp.secs, _x.imgOutput.header.stamp.nsecs))
      _x = self.imgOutput.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.imgOutput.height, _x.imgOutput.width))
      _x = self.imgOutput.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.imgOutput.is_bigendian, _x.imgOutput.step))
      _x = self.imgOutput.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.size_zone_cluttery.x, _x.size_zone_cluttery.y, _x.size_zone_cluttery.z))
      length = len(self.eigen_vectors_zone_cluttery)
      buff.write(_struct_I.pack(length))
      for val1 in self.eigen_vectors_zone_cluttery:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_12d().pack(_x.eigen_values_zone_cluttery.x, _x.eigen_values_zone_cluttery.y, _x.eigen_values_zone_cluttery.z, _x.nearest_point_zone_cluttery.x, _x.nearest_point_zone_cluttery.y, _x.nearest_point_zone_cluttery.z, _x.center_point_zone_cluttery.x, _x.center_point_zone_cluttery.y, _x.center_point_zone_cluttery.z, _x.size_zone_dish.x, _x.size_zone_dish.y, _x.size_zone_dish.z))
      length = len(self.eigen_vectors_zone_dish)
      buff.write(_struct_I.pack(length))
      for val1 in self.eigen_vectors_zone_dish:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_12d().pack(_x.eigen_values_zone_dish.x, _x.eigen_values_zone_dish.y, _x.eigen_values_zone_dish.z, _x.nearest_point_zone_dish.x, _x.nearest_point_zone_dish.y, _x.nearest_point_zone_dish.z, _x.center_point_zone_dish.x, _x.center_point_zone_dish.y, _x.center_point_zone_dish.z, _x.size_zone_glass.x, _x.size_zone_glass.y, _x.size_zone_glass.z))
      length = len(self.eigen_vectors_zone_glass)
      buff.write(_struct_I.pack(length))
      for val1 in self.eigen_vectors_zone_glass:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_9d().pack(_x.eigen_values_zone_glass.x, _x.eigen_values_zone_glass.y, _x.eigen_values_zone_glass.z, _x.nearest_point_zone_glass.x, _x.nearest_point_zone_glass.y, _x.nearest_point_zone_glass.z, _x.center_point_zone_glass.x, _x.center_point_zone_glass.y, _x.center_point_zone_glass.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imgOutput is None:
        self.imgOutput = sensor_msgs.msg.Image()
      if self.size_zone_cluttery is None:
        self.size_zone_cluttery = geometry_msgs.msg.Vector3()
      if self.eigen_vectors_zone_cluttery is None:
        self.eigen_vectors_zone_cluttery = None
      if self.eigen_values_zone_cluttery is None:
        self.eigen_values_zone_cluttery = geometry_msgs.msg.Vector3()
      if self.nearest_point_zone_cluttery is None:
        self.nearest_point_zone_cluttery = geometry_msgs.msg.Point()
      if self.center_point_zone_cluttery is None:
        self.center_point_zone_cluttery = geometry_msgs.msg.Point()
      if self.size_zone_dish is None:
        self.size_zone_dish = geometry_msgs.msg.Vector3()
      if self.eigen_vectors_zone_dish is None:
        self.eigen_vectors_zone_dish = None
      if self.eigen_values_zone_dish is None:
        self.eigen_values_zone_dish = geometry_msgs.msg.Vector3()
      if self.nearest_point_zone_dish is None:
        self.nearest_point_zone_dish = geometry_msgs.msg.Point()
      if self.center_point_zone_dish is None:
        self.center_point_zone_dish = geometry_msgs.msg.Point()
      if self.size_zone_glass is None:
        self.size_zone_glass = geometry_msgs.msg.Vector3()
      if self.eigen_vectors_zone_glass is None:
        self.eigen_vectors_zone_glass = None
      if self.eigen_values_zone_glass is None:
        self.eigen_values_zone_glass = geometry_msgs.msg.Vector3()
      if self.nearest_point_zone_glass is None:
        self.nearest_point_zone_glass = geometry_msgs.msg.Point()
      if self.center_point_zone_glass is None:
        self.center_point_zone_glass = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.imgOutput.header.seq, _x.imgOutput.header.stamp.secs, _x.imgOutput.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imgOutput.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imgOutput.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.imgOutput.height, _x.imgOutput.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imgOutput.encoding = str[start:end].decode('utf-8')
      else:
        self.imgOutput.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.imgOutput.is_bigendian, _x.imgOutput.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.imgOutput.data = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.size_zone_cluttery.x, _x.size_zone_cluttery.y, _x.size_zone_cluttery.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eigen_vectors_zone_cluttery = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.eigen_vectors_zone_cluttery.append(val1)
      _x = self
      start = end
      end += 96
      (_x.eigen_values_zone_cluttery.x, _x.eigen_values_zone_cluttery.y, _x.eigen_values_zone_cluttery.z, _x.nearest_point_zone_cluttery.x, _x.nearest_point_zone_cluttery.y, _x.nearest_point_zone_cluttery.z, _x.center_point_zone_cluttery.x, _x.center_point_zone_cluttery.y, _x.center_point_zone_cluttery.z, _x.size_zone_dish.x, _x.size_zone_dish.y, _x.size_zone_dish.z,) = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eigen_vectors_zone_dish = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.eigen_vectors_zone_dish.append(val1)
      _x = self
      start = end
      end += 96
      (_x.eigen_values_zone_dish.x, _x.eigen_values_zone_dish.y, _x.eigen_values_zone_dish.z, _x.nearest_point_zone_dish.x, _x.nearest_point_zone_dish.y, _x.nearest_point_zone_dish.z, _x.center_point_zone_dish.x, _x.center_point_zone_dish.y, _x.center_point_zone_dish.z, _x.size_zone_glass.x, _x.size_zone_glass.y, _x.size_zone_glass.z,) = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eigen_vectors_zone_glass = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.eigen_vectors_zone_glass.append(val1)
      _x = self
      start = end
      end += 72
      (_x.eigen_values_zone_glass.x, _x.eigen_values_zone_glass.y, _x.eigen_values_zone_glass.z, _x.nearest_point_zone_glass.x, _x.nearest_point_zone_glass.y, _x.nearest_point_zone_glass.z, _x.center_point_zone_glass.x, _x.center_point_zone_glass.y, _x.center_point_zone_glass.z,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
