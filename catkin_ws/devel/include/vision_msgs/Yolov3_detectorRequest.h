// Generated by gencpp from file vision_msgs/Yolov3_detectorRequest.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_YOLOV3_DETECTORREQUEST_H
#define VISION_MSGS_MESSAGE_YOLOV3_DETECTORREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int32.h>
#include <vision_msgs/ObjectCoordinatesForDetection.h>

namespace vision_msgs
{
template <class ContainerAllocator>
struct Yolov3_detectorRequest_
{
  typedef Yolov3_detectorRequest_<ContainerAllocator> Type;

  Yolov3_detectorRequest_()
    : timeOut_ms()
    , objectCoordinates()  {
    }
  Yolov3_detectorRequest_(const ContainerAllocator& _alloc)
    : timeOut_ms(_alloc)
    , objectCoordinates(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int32_<ContainerAllocator>  _timeOut_ms_type;
  _timeOut_ms_type timeOut_ms;

   typedef  ::vision_msgs::ObjectCoordinatesForDetection_<ContainerAllocator>  _objectCoordinates_type;
  _objectCoordinates_type objectCoordinates;





  typedef boost::shared_ptr< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Yolov3_detectorRequest_

typedef ::vision_msgs::Yolov3_detectorRequest_<std::allocator<void> > Yolov3_detectorRequest;

typedef boost::shared_ptr< ::vision_msgs::Yolov3_detectorRequest > Yolov3_detectorRequestPtr;
typedef boost::shared_ptr< ::vision_msgs::Yolov3_detectorRequest const> Yolov3_detectorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator1> & lhs, const ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.timeOut_ms == rhs.timeOut_ms &&
    lhs.objectCoordinates == rhs.objectCoordinates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator1> & lhs, const ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2ce38e17f90f2075b72263367551863";
  }

  static const char* value(const ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2ce38e17f90f207ULL;
  static const uint64_t static_value2 = 0x5b72263367551863ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/Yolov3_detectorRequest";
  }

  static const char* value(const ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Int32 timeOut_ms\n"
"vision_msgs/ObjectCoordinatesForDetection objectCoordinates\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: vision_msgs/ObjectCoordinatesForDetection\n"
"std_msgs/Header header\n"
"float32 x_min\n"
"float32 x_max\n"
"float32 y_min\n"
"float32 y_max\n"
"float32 z_min\n"
"float32 z_max\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeOut_ms);
      stream.next(m.objectCoordinates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Yolov3_detectorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::Yolov3_detectorRequest_<ContainerAllocator>& v)
  {
    s << indent << "timeOut_ms: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.timeOut_ms);
    s << indent << "objectCoordinates: ";
    s << std::endl;
    Printer< ::vision_msgs::ObjectCoordinatesForDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.objectCoordinates);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_YOLOV3_DETECTORREQUEST_H
