// Generated by gencpp from file vision_msgs/DetectHandlesResponse.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_DETECTHANDLESRESPONSE_H
#define VISION_MSGS_MESSAGE_DETECTHANDLESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace vision_msgs
{
template <class ContainerAllocator>
struct DetectHandlesResponse_
{
  typedef DetectHandlesResponse_<ContainerAllocator> Type;

  DetectHandlesResponse_()
    : handle_centroids()  {
    }
  DetectHandlesResponse_(const ContainerAllocator& _alloc)
    : handle_centroids(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _handle_centroids_type;
  _handle_centroids_type handle_centroids;





  typedef boost::shared_ptr< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DetectHandlesResponse_

typedef ::vision_msgs::DetectHandlesResponse_<std::allocator<void> > DetectHandlesResponse;

typedef boost::shared_ptr< ::vision_msgs::DetectHandlesResponse > DetectHandlesResponsePtr;
typedef boost::shared_ptr< ::vision_msgs::DetectHandlesResponse const> DetectHandlesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_msgs::DetectHandlesResponse_<ContainerAllocator1> & lhs, const ::vision_msgs::DetectHandlesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.handle_centroids == rhs.handle_centroids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_msgs::DetectHandlesResponse_<ContainerAllocator1> & lhs, const ::vision_msgs::DetectHandlesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92525e804a9948b1495c70ab8d525004";
  }

  static const char* value(const ::vision_msgs::DetectHandlesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92525e804a9948b1ULL;
  static const uint64_t static_value2 = 0x495c70ab8d525004ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/DetectHandlesResponse";
  }

  static const char* value(const ::vision_msgs::DetectHandlesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] handle_centroids\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::vision_msgs::DetectHandlesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.handle_centroids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectHandlesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::DetectHandlesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::DetectHandlesResponse_<ContainerAllocator>& v)
  {
    s << indent << "handle_centroids[]" << std::endl;
    for (size_t i = 0; i < v.handle_centroids.size(); ++i)
    {
      s << indent << "  handle_centroids[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.handle_centroids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_DETECTHANDLESRESPONSE_H
