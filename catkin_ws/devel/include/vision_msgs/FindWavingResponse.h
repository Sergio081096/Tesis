// Generated by gencpp from file vision_msgs/FindWavingResponse.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_FINDWAVINGRESPONSE_H
#define VISION_MSGS_MESSAGE_FINDWAVINGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vision_msgs/VisionRect.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>

namespace vision_msgs
{
template <class ContainerAllocator>
struct FindWavingResponse_
{
  typedef FindWavingResponse_<ContainerAllocator> Type;

  FindWavingResponse_()
    : bounding_box()
    , frame_width()
    , frame_height()  {
    }
  FindWavingResponse_(const ContainerAllocator& _alloc)
    : bounding_box(_alloc)
    , frame_width(_alloc)
    , frame_height(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::vision_msgs::VisionRect_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::vision_msgs::VisionRect_<ContainerAllocator> >::other >  _bounding_box_type;
  _bounding_box_type bounding_box;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _frame_width_type;
  _frame_width_type frame_width;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _frame_height_type;
  _frame_height_type frame_height;





  typedef boost::shared_ptr< ::vision_msgs::FindWavingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::FindWavingResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FindWavingResponse_

typedef ::vision_msgs::FindWavingResponse_<std::allocator<void> > FindWavingResponse;

typedef boost::shared_ptr< ::vision_msgs::FindWavingResponse > FindWavingResponsePtr;
typedef boost::shared_ptr< ::vision_msgs::FindWavingResponse const> FindWavingResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::FindWavingResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::FindWavingResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_msgs::FindWavingResponse_<ContainerAllocator1> & lhs, const ::vision_msgs::FindWavingResponse_<ContainerAllocator2> & rhs)
{
  return lhs.bounding_box == rhs.bounding_box &&
    lhs.frame_width == rhs.frame_width &&
    lhs.frame_height == rhs.frame_height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_msgs::FindWavingResponse_<ContainerAllocator1> & lhs, const ::vision_msgs::FindWavingResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::FindWavingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::FindWavingResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::FindWavingResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::FindWavingResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::FindWavingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::FindWavingResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::FindWavingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5efa18c4fad16dbe94cb16a4d7151ec";
  }

  static const char* value(const ::vision_msgs::FindWavingResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5efa18c4fad16dbULL;
  static const uint64_t static_value2 = 0xe94cb16a4d7151ecULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::FindWavingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/FindWavingResponse";
  }

  static const char* value(const ::vision_msgs::FindWavingResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::FindWavingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/VisionRect[] bounding_box\n"
"std_msgs/Int32 frame_width\n"
"std_msgs/Int32 frame_height\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: vision_msgs/VisionRect\n"
"int32 x\n"
"int32 y\n"
"int32 width\n"
"int32 height\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
;
  }

  static const char* value(const ::vision_msgs::FindWavingResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::FindWavingResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bounding_box);
      stream.next(m.frame_width);
      stream.next(m.frame_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FindWavingResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::FindWavingResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::FindWavingResponse_<ContainerAllocator>& v)
  {
    s << indent << "bounding_box[]" << std::endl;
    for (size_t i = 0; i < v.bounding_box.size(); ++i)
    {
      s << indent << "  bounding_box[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vision_msgs::VisionRect_<ContainerAllocator> >::stream(s, indent + "    ", v.bounding_box[i]);
    }
    s << indent << "frame_width: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.frame_width);
    s << indent << "frame_height: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.frame_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_FINDWAVINGRESPONSE_H
