// Generated by gencpp from file vision_msgs/MSG_VisionPlasticTray.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_MSG_VISIONPLASTICTRAY_H
#define VISION_MSGS_MESSAGE_MSG_VISIONPLASTICTRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/Image.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace vision_msgs
{
template <class ContainerAllocator>
struct MSG_VisionPlasticTray_
{
  typedef MSG_VisionPlasticTray_<ContainerAllocator> Type;

  MSG_VisionPlasticTray_()
    : header()
    , imgOutput()
    , size_zone_cluttery()
    , eigen_vectors_zone_cluttery()
    , eigen_values_zone_cluttery()
    , nearest_point_zone_cluttery()
    , center_point_zone_cluttery()
    , size_zone_dish()
    , eigen_vectors_zone_dish()
    , eigen_values_zone_dish()
    , nearest_point_zone_dish()
    , center_point_zone_dish()
    , size_zone_glass()
    , eigen_vectors_zone_glass()
    , eigen_values_zone_glass()
    , nearest_point_zone_glass()
    , center_point_zone_glass()  {
    }
  MSG_VisionPlasticTray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , imgOutput(_alloc)
    , size_zone_cluttery(_alloc)
    , eigen_vectors_zone_cluttery(_alloc)
    , eigen_values_zone_cluttery(_alloc)
    , nearest_point_zone_cluttery(_alloc)
    , center_point_zone_cluttery(_alloc)
    , size_zone_dish(_alloc)
    , eigen_vectors_zone_dish(_alloc)
    , eigen_values_zone_dish(_alloc)
    , nearest_point_zone_dish(_alloc)
    , center_point_zone_dish(_alloc)
    , size_zone_glass(_alloc)
    , eigen_vectors_zone_glass(_alloc)
    , eigen_values_zone_glass(_alloc)
    , nearest_point_zone_glass(_alloc)
    , center_point_zone_glass(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _imgOutput_type;
  _imgOutput_type imgOutput;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _size_zone_cluttery_type;
  _size_zone_cluttery_type size_zone_cluttery;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _eigen_vectors_zone_cluttery_type;
  _eigen_vectors_zone_cluttery_type eigen_vectors_zone_cluttery;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _eigen_values_zone_cluttery_type;
  _eigen_values_zone_cluttery_type eigen_values_zone_cluttery;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _nearest_point_zone_cluttery_type;
  _nearest_point_zone_cluttery_type nearest_point_zone_cluttery;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_point_zone_cluttery_type;
  _center_point_zone_cluttery_type center_point_zone_cluttery;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _size_zone_dish_type;
  _size_zone_dish_type size_zone_dish;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _eigen_vectors_zone_dish_type;
  _eigen_vectors_zone_dish_type eigen_vectors_zone_dish;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _eigen_values_zone_dish_type;
  _eigen_values_zone_dish_type eigen_values_zone_dish;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _nearest_point_zone_dish_type;
  _nearest_point_zone_dish_type nearest_point_zone_dish;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_point_zone_dish_type;
  _center_point_zone_dish_type center_point_zone_dish;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _size_zone_glass_type;
  _size_zone_glass_type size_zone_glass;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _eigen_vectors_zone_glass_type;
  _eigen_vectors_zone_glass_type eigen_vectors_zone_glass;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _eigen_values_zone_glass_type;
  _eigen_values_zone_glass_type eigen_values_zone_glass;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _nearest_point_zone_glass_type;
  _nearest_point_zone_glass_type nearest_point_zone_glass;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_point_zone_glass_type;
  _center_point_zone_glass_type center_point_zone_glass;





  typedef boost::shared_ptr< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> const> ConstPtr;

}; // struct MSG_VisionPlasticTray_

typedef ::vision_msgs::MSG_VisionPlasticTray_<std::allocator<void> > MSG_VisionPlasticTray;

typedef boost::shared_ptr< ::vision_msgs::MSG_VisionPlasticTray > MSG_VisionPlasticTrayPtr;
typedef boost::shared_ptr< ::vision_msgs::MSG_VisionPlasticTray const> MSG_VisionPlasticTrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator1> & lhs, const ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.imgOutput == rhs.imgOutput &&
    lhs.size_zone_cluttery == rhs.size_zone_cluttery &&
    lhs.eigen_vectors_zone_cluttery == rhs.eigen_vectors_zone_cluttery &&
    lhs.eigen_values_zone_cluttery == rhs.eigen_values_zone_cluttery &&
    lhs.nearest_point_zone_cluttery == rhs.nearest_point_zone_cluttery &&
    lhs.center_point_zone_cluttery == rhs.center_point_zone_cluttery &&
    lhs.size_zone_dish == rhs.size_zone_dish &&
    lhs.eigen_vectors_zone_dish == rhs.eigen_vectors_zone_dish &&
    lhs.eigen_values_zone_dish == rhs.eigen_values_zone_dish &&
    lhs.nearest_point_zone_dish == rhs.nearest_point_zone_dish &&
    lhs.center_point_zone_dish == rhs.center_point_zone_dish &&
    lhs.size_zone_glass == rhs.size_zone_glass &&
    lhs.eigen_vectors_zone_glass == rhs.eigen_vectors_zone_glass &&
    lhs.eigen_values_zone_glass == rhs.eigen_values_zone_glass &&
    lhs.nearest_point_zone_glass == rhs.nearest_point_zone_glass &&
    lhs.center_point_zone_glass == rhs.center_point_zone_glass;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator1> & lhs, const ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7fd9643cb9f19bb45cb9febf36963dd3";
  }

  static const char* value(const ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7fd9643cb9f19bb4ULL;
  static const uint64_t static_value2 = 0x5cb9febf36963dd3ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/MSG_VisionPlasticTray";
  }

  static const char* value(const ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"sensor_msgs/Image   imgOutput\n"
"#std_msgs/Bool wasFound\n"
"#cluttery section\n"
"geometry_msgs/Vector3 size_zone_cluttery                 # Size in meters: size in x, y and z\n"
"geometry_msgs/Vector3[] eigen_vectors_zone_cluttery      # eigen vectors of the object from 3D informaction\n"
"geometry_msgs/Vector3 eigen_values_zone_cluttery	     # eigen values asociated with eigen_vector\n"
"geometry_msgs/Point  nearest_point_zone_cluttery         # The nearespoint of the object\n"
"geometry_msgs/Point  center_point_zone_cluttery          # The nearespoint of the object\n"
"\n"
"\n"
"geometry_msgs/Vector3 size_zone_dish                 # Size in meters: size in x, y and z\n"
"geometry_msgs/Vector3[] eigen_vectors_zone_dish      # eigen vectors of the object from 3D informaction\n"
"geometry_msgs/Vector3 eigen_values_zone_dish	     # eigen values asociated with eigen_vector\n"
"geometry_msgs/Point  nearest_point_zone_dish         # The nearespoint of the object\n"
"geometry_msgs/Point  center_point_zone_dish          # The nearespoint of the object\n"
"\n"
"\n"
"geometry_msgs/Vector3 size_zone_glass                 # Size in meters: size in x, y and z\n"
"geometry_msgs/Vector3[] eigen_vectors_zone_glass      # eigen vectors of the object from 3D informaction\n"
"geometry_msgs/Vector3 eigen_values_zone_glass	     # eigen values asociated with eigen_vector\n"
"geometry_msgs/Point  nearest_point_zone_glass         # The nearespoint of the object\n"
"geometry_msgs/Point  center_point_zone_glass          # The nearespoint of the object\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.imgOutput);
      stream.next(m.size_zone_cluttery);
      stream.next(m.eigen_vectors_zone_cluttery);
      stream.next(m.eigen_values_zone_cluttery);
      stream.next(m.nearest_point_zone_cluttery);
      stream.next(m.center_point_zone_cluttery);
      stream.next(m.size_zone_dish);
      stream.next(m.eigen_vectors_zone_dish);
      stream.next(m.eigen_values_zone_dish);
      stream.next(m.nearest_point_zone_dish);
      stream.next(m.center_point_zone_dish);
      stream.next(m.size_zone_glass);
      stream.next(m.eigen_vectors_zone_glass);
      stream.next(m.eigen_values_zone_glass);
      stream.next(m.nearest_point_zone_glass);
      stream.next(m.center_point_zone_glass);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MSG_VisionPlasticTray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::MSG_VisionPlasticTray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "imgOutput: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.imgOutput);
    s << indent << "size_zone_cluttery: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.size_zone_cluttery);
    s << indent << "eigen_vectors_zone_cluttery[]" << std::endl;
    for (size_t i = 0; i < v.eigen_vectors_zone_cluttery.size(); ++i)
    {
      s << indent << "  eigen_vectors_zone_cluttery[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.eigen_vectors_zone_cluttery[i]);
    }
    s << indent << "eigen_values_zone_cluttery: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.eigen_values_zone_cluttery);
    s << indent << "nearest_point_zone_cluttery: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.nearest_point_zone_cluttery);
    s << indent << "center_point_zone_cluttery: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center_point_zone_cluttery);
    s << indent << "size_zone_dish: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.size_zone_dish);
    s << indent << "eigen_vectors_zone_dish[]" << std::endl;
    for (size_t i = 0; i < v.eigen_vectors_zone_dish.size(); ++i)
    {
      s << indent << "  eigen_vectors_zone_dish[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.eigen_vectors_zone_dish[i]);
    }
    s << indent << "eigen_values_zone_dish: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.eigen_values_zone_dish);
    s << indent << "nearest_point_zone_dish: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.nearest_point_zone_dish);
    s << indent << "center_point_zone_dish: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center_point_zone_dish);
    s << indent << "size_zone_glass: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.size_zone_glass);
    s << indent << "eigen_vectors_zone_glass[]" << std::endl;
    for (size_t i = 0; i < v.eigen_vectors_zone_glass.size(); ++i)
    {
      s << indent << "  eigen_vectors_zone_glass[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.eigen_vectors_zone_glass[i]);
    }
    s << indent << "eigen_values_zone_glass: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.eigen_values_zone_glass);
    s << indent << "nearest_point_zone_glass: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.nearest_point_zone_glass);
    s << indent << "center_point_zone_glass: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center_point_zone_glass);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_MSG_VISIONPLASTICTRAY_H
