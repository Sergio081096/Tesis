// Generated by gencpp from file env_msgs/ObjectViz.msg
// DO NOT EDIT!


#ifndef ENV_MSGS_MESSAGE_OBJECTVIZ_H
#define ENV_MSGS_MESSAGE_OBJECTVIZ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace env_msgs
{
template <class ContainerAllocator>
struct ObjectViz_
{
  typedef ObjectViz_<ContainerAllocator> Type;

  ObjectViz_()
    : id()
    , frame_original()
    , frame_goal()
    , color()
    , centroid()
    , minPoint()
    , maxPoint()  {
    }
  ObjectViz_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , frame_original(_alloc)
    , frame_goal(_alloc)
    , color(_alloc)
    , centroid(_alloc)
    , minPoint(_alloc)
    , maxPoint(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef  ::std_msgs::String_<ContainerAllocator>  _frame_original_type;
  _frame_original_type frame_original;

   typedef  ::std_msgs::String_<ContainerAllocator>  _frame_goal_type;
  _frame_goal_type frame_goal;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _color_type;
  _color_type color;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _centroid_type;
  _centroid_type centroid;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _minPoint_type;
  _minPoint_type minPoint;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _maxPoint_type;
  _maxPoint_type maxPoint;





  typedef boost::shared_ptr< ::env_msgs::ObjectViz_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::env_msgs::ObjectViz_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectViz_

typedef ::env_msgs::ObjectViz_<std::allocator<void> > ObjectViz;

typedef boost::shared_ptr< ::env_msgs::ObjectViz > ObjectVizPtr;
typedef boost::shared_ptr< ::env_msgs::ObjectViz const> ObjectVizConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::env_msgs::ObjectViz_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::env_msgs::ObjectViz_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::env_msgs::ObjectViz_<ContainerAllocator1> & lhs, const ::env_msgs::ObjectViz_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.frame_original == rhs.frame_original &&
    lhs.frame_goal == rhs.frame_goal &&
    lhs.color == rhs.color &&
    lhs.centroid == rhs.centroid &&
    lhs.minPoint == rhs.minPoint &&
    lhs.maxPoint == rhs.maxPoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::env_msgs::ObjectViz_<ContainerAllocator1> & lhs, const ::env_msgs::ObjectViz_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace env_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::env_msgs::ObjectViz_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::env_msgs::ObjectViz_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::env_msgs::ObjectViz_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::env_msgs::ObjectViz_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::env_msgs::ObjectViz_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::env_msgs::ObjectViz_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::env_msgs::ObjectViz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "716d0a5b4811b82e0bdd4ac37f12486e";
  }

  static const char* value(const ::env_msgs::ObjectViz_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x716d0a5b4811b82eULL;
  static const uint64_t static_value2 = 0x0bdd4ac37f12486eULL;
};

template<class ContainerAllocator>
struct DataType< ::env_msgs::ObjectViz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "env_msgs/ObjectViz";
  }

  static const char* value(const ::env_msgs::ObjectViz_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::env_msgs::ObjectViz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String id\n"
"std_msgs/String frame_original\n"
"std_msgs/String frame_goal\n"
"geometry_msgs/Vector3 color\n"
"geometry_msgs/Point centroid\n"
"geometry_msgs/Point minPoint\n"
"geometry_msgs/Point maxPoint\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::env_msgs::ObjectViz_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::env_msgs::ObjectViz_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.frame_original);
      stream.next(m.frame_goal);
      stream.next(m.color);
      stream.next(m.centroid);
      stream.next(m.minPoint);
      stream.next(m.maxPoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectViz_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::env_msgs::ObjectViz_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::env_msgs::ObjectViz_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "frame_original: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.frame_original);
    s << indent << "frame_goal: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.frame_goal);
    s << indent << "color: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "centroid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.centroid);
    s << indent << "minPoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.minPoint);
    s << indent << "maxPoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.maxPoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ENV_MSGS_MESSAGE_OBJECTVIZ_H
