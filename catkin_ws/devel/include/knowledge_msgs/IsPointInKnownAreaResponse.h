// Generated by gencpp from file knowledge_msgs/IsPointInKnownAreaResponse.msg
// DO NOT EDIT!


#ifndef KNOWLEDGE_MSGS_MESSAGE_ISPOINTINKNOWNAREARESPONSE_H
#define KNOWLEDGE_MSGS_MESSAGE_ISPOINTINKNOWNAREARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace knowledge_msgs
{
template <class ContainerAllocator>
struct IsPointInKnownAreaResponse_
{
  typedef IsPointInKnownAreaResponse_<ContainerAllocator> Type;

  IsPointInKnownAreaResponse_()
    : isInLocation(false)  {
    }
  IsPointInKnownAreaResponse_(const ContainerAllocator& _alloc)
    : isInLocation(false)  {
  (void)_alloc;
    }



   typedef uint8_t _isInLocation_type;
  _isInLocation_type isInLocation;





  typedef boost::shared_ptr< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> const> ConstPtr;

}; // struct IsPointInKnownAreaResponse_

typedef ::knowledge_msgs::IsPointInKnownAreaResponse_<std::allocator<void> > IsPointInKnownAreaResponse;

typedef boost::shared_ptr< ::knowledge_msgs::IsPointInKnownAreaResponse > IsPointInKnownAreaResponsePtr;
typedef boost::shared_ptr< ::knowledge_msgs::IsPointInKnownAreaResponse const> IsPointInKnownAreaResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator1> & lhs, const ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator2> & rhs)
{
  return lhs.isInLocation == rhs.isInLocation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator1> & lhs, const ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace knowledge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4615f724f10e910e56ccfa31bac398fa";
  }

  static const char* value(const ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4615f724f10e910eULL;
  static const uint64_t static_value2 = 0x56ccfa31bac398faULL;
};

template<class ContainerAllocator>
struct DataType< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "knowledge_msgs/IsPointInKnownAreaResponse";
  }

  static const char* value(const ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isInLocation\n"
"\n"
;
  }

  static const char* value(const ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isInLocation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IsPointInKnownAreaResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::knowledge_msgs::IsPointInKnownAreaResponse_<ContainerAllocator>& v)
  {
    s << indent << "isInLocation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isInLocation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KNOWLEDGE_MSGS_MESSAGE_ISPOINTINKNOWNAREARESPONSE_H
