// Generated by gencpp from file knowledge_msgs/find_personResponse.msg
// DO NOT EDIT!


#ifndef KNOWLEDGE_MSGS_MESSAGE_FIND_PERSONRESPONSE_H
#define KNOWLEDGE_MSGS_MESSAGE_FIND_PERSONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vision_msgs/VisionFaceObject.h>

namespace knowledge_msgs
{
template <class ContainerAllocator>
struct find_personResponse_
{
  typedef find_personResponse_<ContainerAllocator> Type;

  find_personResponse_()
    : person_face()
    , task_success(false)  {
    }
  find_personResponse_(const ContainerAllocator& _alloc)
    : person_face(_alloc)
    , task_success(false)  {
  (void)_alloc;
    }



   typedef  ::vision_msgs::VisionFaceObject_<ContainerAllocator>  _person_face_type;
  _person_face_type person_face;

   typedef uint8_t _task_success_type;
  _task_success_type task_success;





  typedef boost::shared_ptr< ::knowledge_msgs::find_personResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::knowledge_msgs::find_personResponse_<ContainerAllocator> const> ConstPtr;

}; // struct find_personResponse_

typedef ::knowledge_msgs::find_personResponse_<std::allocator<void> > find_personResponse;

typedef boost::shared_ptr< ::knowledge_msgs::find_personResponse > find_personResponsePtr;
typedef boost::shared_ptr< ::knowledge_msgs::find_personResponse const> find_personResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::knowledge_msgs::find_personResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::knowledge_msgs::find_personResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::knowledge_msgs::find_personResponse_<ContainerAllocator1> & lhs, const ::knowledge_msgs::find_personResponse_<ContainerAllocator2> & rhs)
{
  return lhs.person_face == rhs.person_face &&
    lhs.task_success == rhs.task_success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::knowledge_msgs::find_personResponse_<ContainerAllocator1> & lhs, const ::knowledge_msgs::find_personResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace knowledge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::knowledge_msgs::find_personResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::knowledge_msgs::find_personResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowledge_msgs::find_personResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowledge_msgs::find_personResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowledge_msgs::find_personResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowledge_msgs::find_personResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::knowledge_msgs::find_personResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "676f485aabec4ad84af601202706a726";
  }

  static const char* value(const ::knowledge_msgs::find_personResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x676f485aabec4ad8ULL;
  static const uint64_t static_value2 = 0x4af601202706a726ULL;
};

template<class ContainerAllocator>
struct DataType< ::knowledge_msgs::find_personResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "knowledge_msgs/find_personResponse";
  }

  static const char* value(const ::knowledge_msgs::find_personResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::knowledge_msgs::find_personResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/VisionFaceObject person_face\n"
"bool task_success\n"
"\n"
"\n"
"================================================================================\n"
"MSG: vision_msgs/VisionFaceObject\n"
"string id                                    #face id\n"
"float32 confidence                           #value in [0,1] indicating the probability of a correct identification\n"
"geometry_msgs/Point face_centroid            #Face Centroid (x,y,z)\n"
"geometry_msgs/Point[] bounding_box           #Face bounding box 2D\n"
"bool smile                                   #smiling face\n"
"int8 gender                                  #Gender ID. 0: female, 1: male, 2: unknown\n"
"int8 ages                             	     #Ages ID. 0: children, 1: adult, 2: elder\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::knowledge_msgs::find_personResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::knowledge_msgs::find_personResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.person_face);
      stream.next(m.task_success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct find_personResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::knowledge_msgs::find_personResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::knowledge_msgs::find_personResponse_<ContainerAllocator>& v)
  {
    s << indent << "person_face: ";
    s << std::endl;
    Printer< ::vision_msgs::VisionFaceObject_<ContainerAllocator> >::stream(s, indent + "  ", v.person_face);
    s << indent << "task_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.task_success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KNOWLEDGE_MSGS_MESSAGE_FIND_PERSONRESPONSE_H
