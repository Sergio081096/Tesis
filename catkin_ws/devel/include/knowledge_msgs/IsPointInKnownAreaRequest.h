// Generated by gencpp from file knowledge_msgs/IsPointInKnownAreaRequest.msg
// DO NOT EDIT!


#ifndef KNOWLEDGE_MSGS_MESSAGE_ISPOINTINKNOWNAREAREQUEST_H
#define KNOWLEDGE_MSGS_MESSAGE_ISPOINTINKNOWNAREAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>

namespace knowledge_msgs
{
template <class ContainerAllocator>
struct IsPointInKnownAreaRequest_
{
  typedef IsPointInKnownAreaRequest_<ContainerAllocator> Type;

  IsPointInKnownAreaRequest_()
    : location()
    , point()  {
    }
  IsPointInKnownAreaRequest_(const ContainerAllocator& _alloc)
    : location(_alloc)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _location_type;
  _location_type location;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IsPointInKnownAreaRequest_

typedef ::knowledge_msgs::IsPointInKnownAreaRequest_<std::allocator<void> > IsPointInKnownAreaRequest;

typedef boost::shared_ptr< ::knowledge_msgs::IsPointInKnownAreaRequest > IsPointInKnownAreaRequestPtr;
typedef boost::shared_ptr< ::knowledge_msgs::IsPointInKnownAreaRequest const> IsPointInKnownAreaRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator1> & lhs, const ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator2> & rhs)
{
  return lhs.location == rhs.location &&
    lhs.point == rhs.point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator1> & lhs, const ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace knowledge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48544a82a7c70dae5dd60b5d706a369b";
  }

  static const char* value(const ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48544a82a7c70daeULL;
  static const uint64_t static_value2 = 0x5dd60b5d706a369bULL;
};

template<class ContainerAllocator>
struct DataType< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "knowledge_msgs/IsPointInKnownAreaRequest";
  }

  static const char* value(const ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string location\n"
"geometry_msgs/Point32 point\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.location);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IsPointInKnownAreaRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::knowledge_msgs::IsPointInKnownAreaRequest_<ContainerAllocator>& v)
  {
    s << indent << "location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.location);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KNOWLEDGE_MSGS_MESSAGE_ISPOINTINKNOWNAREAREQUEST_H
