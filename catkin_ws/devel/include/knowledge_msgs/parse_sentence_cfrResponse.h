// Generated by gencpp from file knowledge_msgs/parse_sentence_cfrResponse.msg
// DO NOT EDIT!


#ifndef KNOWLEDGE_MSGS_MESSAGE_PARSE_SENTENCE_CFRRESPONSE_H
#define KNOWLEDGE_MSGS_MESSAGE_PARSE_SENTENCE_CFRRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <knowledge_msgs/PlanningCFR.h>

namespace knowledge_msgs
{
template <class ContainerAllocator>
struct parse_sentence_cfrResponse_
{
  typedef parse_sentence_cfrResponse_<ContainerAllocator> Type;

  parse_sentence_cfrResponse_()
    : cfr()  {
    }
  parse_sentence_cfrResponse_(const ContainerAllocator& _alloc)
    : cfr(_alloc)  {
  (void)_alloc;
    }



   typedef  ::knowledge_msgs::PlanningCFR_<ContainerAllocator>  _cfr_type;
  _cfr_type cfr;





  typedef boost::shared_ptr< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> const> ConstPtr;

}; // struct parse_sentence_cfrResponse_

typedef ::knowledge_msgs::parse_sentence_cfrResponse_<std::allocator<void> > parse_sentence_cfrResponse;

typedef boost::shared_ptr< ::knowledge_msgs::parse_sentence_cfrResponse > parse_sentence_cfrResponsePtr;
typedef boost::shared_ptr< ::knowledge_msgs::parse_sentence_cfrResponse const> parse_sentence_cfrResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator1> & lhs, const ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator2> & rhs)
{
  return lhs.cfr == rhs.cfr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator1> & lhs, const ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace knowledge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd96389c3afb6e7a34d27c969a7ac94d";
  }

  static const char* value(const ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd96389c3afb6e7aULL;
  static const uint64_t static_value2 = 0x34d27c969a7ac94dULL;
};

template<class ContainerAllocator>
struct DataType< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "knowledge_msgs/parse_sentence_cfrResponse";
  }

  static const char* value(const ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PlanningCFR cfr\n"
"\n"
"\n"
"================================================================================\n"
"MSG: knowledge_msgs/PlanningCFR\n"
"string command\n"
"CFRParams[] params\n"
"\n"
"================================================================================\n"
"MSG: knowledge_msgs/CFRParams\n"
"string frame_id\n"
"string frame_value\n"
;
  }

  static const char* value(const ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cfr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct parse_sentence_cfrResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::knowledge_msgs::parse_sentence_cfrResponse_<ContainerAllocator>& v)
  {
    s << indent << "cfr: ";
    s << std::endl;
    Printer< ::knowledge_msgs::PlanningCFR_<ContainerAllocator> >::stream(s, indent + "  ", v.cfr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KNOWLEDGE_MSGS_MESSAGE_PARSE_SENTENCE_CFRRESPONSE_H
