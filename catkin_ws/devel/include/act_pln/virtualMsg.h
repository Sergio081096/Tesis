// Generated by gencpp from file act_pln/virtualMsg.msg
// DO NOT EDIT!


#ifndef ACT_PLN_MESSAGE_VIRTUALMSG_H
#define ACT_PLN_MESSAGE_VIRTUALMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace act_pln
{
template <class ContainerAllocator>
struct virtualMsg_
{
  typedef virtualMsg_<ContainerAllocator> Type;

  virtualMsg_()
    : message()
    , detail()  {
    }
  virtualMsg_(const ContainerAllocator& _alloc)
    : message(_alloc)
    , detail(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _detail_type;
  _detail_type detail;





  typedef boost::shared_ptr< ::act_pln::virtualMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::act_pln::virtualMsg_<ContainerAllocator> const> ConstPtr;

}; // struct virtualMsg_

typedef ::act_pln::virtualMsg_<std::allocator<void> > virtualMsg;

typedef boost::shared_ptr< ::act_pln::virtualMsg > virtualMsgPtr;
typedef boost::shared_ptr< ::act_pln::virtualMsg const> virtualMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::act_pln::virtualMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::act_pln::virtualMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::act_pln::virtualMsg_<ContainerAllocator1> & lhs, const ::act_pln::virtualMsg_<ContainerAllocator2> & rhs)
{
  return lhs.message == rhs.message &&
    lhs.detail == rhs.detail;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::act_pln::virtualMsg_<ContainerAllocator1> & lhs, const ::act_pln::virtualMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace act_pln

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::act_pln::virtualMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::act_pln::virtualMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::act_pln::virtualMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::act_pln::virtualMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::act_pln::virtualMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::act_pln::virtualMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::act_pln::virtualMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83c3ad4b113aebdb7a85eba9ba595d50";
  }

  static const char* value(const ::act_pln::virtualMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83c3ad4b113aebdbULL;
  static const uint64_t static_value2 = 0x7a85eba9ba595d50ULL;
};

template<class ContainerAllocator>
struct DataType< ::act_pln::virtualMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "act_pln/virtualMsg";
  }

  static const char* value(const ::act_pln::virtualMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::act_pln::virtualMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string message\n"
"string detail\n"
;
  }

  static const char* value(const ::act_pln::virtualMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::act_pln::virtualMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message);
      stream.next(m.detail);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct virtualMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::act_pln::virtualMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::act_pln::virtualMsg_<ContainerAllocator>& v)
  {
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "detail: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.detail);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACT_PLN_MESSAGE_VIRTUALMSG_H
