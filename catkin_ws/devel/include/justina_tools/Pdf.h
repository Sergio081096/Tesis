// Generated by gencpp from file justina_tools/Pdf.msg
// DO NOT EDIT!


#ifndef JUSTINA_TOOLS_MESSAGE_PDF_H
#define JUSTINA_TOOLS_MESSAGE_PDF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace justina_tools
{
template <class ContainerAllocator>
struct Pdf_
{
  typedef Pdf_<ContainerAllocator> Type;

  Pdf_()
    : tipo(0)
    , contenido()  {
    }
  Pdf_(const ContainerAllocator& _alloc)
    : tipo(0)
    , contenido(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _tipo_type;
  _tipo_type tipo;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _contenido_type;
  _contenido_type contenido;





  typedef boost::shared_ptr< ::justina_tools::Pdf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::justina_tools::Pdf_<ContainerAllocator> const> ConstPtr;

}; // struct Pdf_

typedef ::justina_tools::Pdf_<std::allocator<void> > Pdf;

typedef boost::shared_ptr< ::justina_tools::Pdf > PdfPtr;
typedef boost::shared_ptr< ::justina_tools::Pdf const> PdfConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::justina_tools::Pdf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::justina_tools::Pdf_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::justina_tools::Pdf_<ContainerAllocator1> & lhs, const ::justina_tools::Pdf_<ContainerAllocator2> & rhs)
{
  return lhs.tipo == rhs.tipo &&
    lhs.contenido == rhs.contenido;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::justina_tools::Pdf_<ContainerAllocator1> & lhs, const ::justina_tools::Pdf_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace justina_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::justina_tools::Pdf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::justina_tools::Pdf_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::justina_tools::Pdf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::justina_tools::Pdf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::justina_tools::Pdf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::justina_tools::Pdf_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::justina_tools::Pdf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "006374a64160bed88da3027137bbe361";
  }

  static const char* value(const ::justina_tools::Pdf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x006374a64160bed8ULL;
  static const uint64_t static_value2 = 0x8da3027137bbe361ULL;
};

template<class ContainerAllocator>
struct DataType< ::justina_tools::Pdf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "justina_tools/Pdf";
  }

  static const char* value(const ::justina_tools::Pdf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::justina_tools::Pdf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 tipo\n"
"string contenido\n"
;
  }

  static const char* value(const ::justina_tools::Pdf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::justina_tools::Pdf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tipo);
      stream.next(m.contenido);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pdf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::justina_tools::Pdf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::justina_tools::Pdf_<ContainerAllocator>& v)
  {
    s << indent << "tipo: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tipo);
    s << indent << "contenido: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.contenido);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JUSTINA_TOOLS_MESSAGE_PDF_H
