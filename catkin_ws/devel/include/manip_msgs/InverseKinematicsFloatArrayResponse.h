// Generated by gencpp from file manip_msgs/InverseKinematicsFloatArrayResponse.msg
// DO NOT EDIT!


#ifndef MANIP_MSGS_MESSAGE_INVERSEKINEMATICSFLOATARRAYRESPONSE_H
#define MANIP_MSGS_MESSAGE_INVERSEKINEMATICSFLOATARRAYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32MultiArray.h>
#include <std_msgs/Float32.h>
#include <geometry_msgs/Pose2D.h>

namespace manip_msgs
{
template <class ContainerAllocator>
struct InverseKinematicsFloatArrayResponse_
{
  typedef InverseKinematicsFloatArrayResponse_<ContainerAllocator> Type;

  InverseKinematicsFloatArrayResponse_()
    : articular_pose()
    , torso_pose()
    , base_correction()  {
    }
  InverseKinematicsFloatArrayResponse_(const ContainerAllocator& _alloc)
    : articular_pose(_alloc)
    , torso_pose(_alloc)
    , base_correction(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32MultiArray_<ContainerAllocator>  _articular_pose_type;
  _articular_pose_type articular_pose;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _torso_pose_type;
  _torso_pose_type torso_pose;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _base_correction_type;
  _base_correction_type base_correction;





  typedef boost::shared_ptr< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> const> ConstPtr;

}; // struct InverseKinematicsFloatArrayResponse_

typedef ::manip_msgs::InverseKinematicsFloatArrayResponse_<std::allocator<void> > InverseKinematicsFloatArrayResponse;

typedef boost::shared_ptr< ::manip_msgs::InverseKinematicsFloatArrayResponse > InverseKinematicsFloatArrayResponsePtr;
typedef boost::shared_ptr< ::manip_msgs::InverseKinematicsFloatArrayResponse const> InverseKinematicsFloatArrayResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator1> & lhs, const ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator2> & rhs)
{
  return lhs.articular_pose == rhs.articular_pose &&
    lhs.torso_pose == rhs.torso_pose &&
    lhs.base_correction == rhs.base_correction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator1> & lhs, const ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace manip_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f91baa25db30771c05689c75bfed68c";
  }

  static const char* value(const ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f91baa25db30771ULL;
  static const uint64_t static_value2 = 0xc05689c75bfed68cULL;
};

template<class ContainerAllocator>
struct DataType< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manip_msgs/InverseKinematicsFloatArrayResponse";
  }

  static const char* value(const ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32MultiArray   articular_pose\n"
"std_msgs/Float32  	     torso_pose			     \n"
"geometry_msgs/Pose2D 	     base_correction\n"
"\n"
"#The intended use of this service is as follows:\n"
"#If cartesian_pose has six elements, then, the corresponding seven articular positions are calculated\n"
"#If cartesian_pose has six values (xyzrpy)\n"
"\n"
"#Result is an array of five floats representing the angular position for each motor in the arm \n"
"# [  arm_flex_joint\n"
"#   arm_roll_joint\n"
"#   wrist_flex_joint\n"
"#   wrist_roll_joint]\n"
"\n"
"# omni_base_correction are variables for omni_base robot to correct gripper pose.\n"
"# torso pose is a variable for torso control\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float32[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.articular_pose);
      stream.next(m.torso_pose);
      stream.next(m.base_correction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InverseKinematicsFloatArrayResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manip_msgs::InverseKinematicsFloatArrayResponse_<ContainerAllocator>& v)
  {
    s << indent << "articular_pose: ";
    s << std::endl;
    Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.articular_pose);
    s << indent << "torso_pose: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.torso_pose);
    s << indent << "base_correction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.base_correction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANIP_MSGS_MESSAGE_INVERSEKINEMATICSFLOATARRAYRESPONSE_H
